#@ *: DakotaConfig=HAVE_NPSOL
environment,
	  method_pointer = 'OPTIM'

method,
	id_method = 'OPTIM'
	model_pointer = 'OPTIM_M'
	npsol_sqp
#	dot_sqp
#	optpp_q_newton
	  convergence_tolerance = 1.e-6
	  output verbose

model,
	id_model = 'OPTIM_M'
	nested
	  variables_pointer  = 'OPTIM_V'
	  sub_method_pointer = 'UQ'
	  optional_interface_pointer  = 'OPTIONAL_I'
	  optional_interface_responses_pointer = 'OPTIONAL_I_R'
	  responses_pointer  = 'OPTIM_R'
	  primary_variable_mapping   = 'x1'   'x2'   'x3'   'x4'   'x5'   'x6'   'x7'
	  secondary_variable_mapping = 'mean' 'mean' 'mean' 'mean' 'mean' 'mean' 'mean'
# 10 component reliability constraints:
#	  secondary_response_mapping   =  2*0. 1. 27*0.     5*0. 1. 24*0.
#					  8*0. 1. 21*0.	   11*0. 1. 18*0.
#					 14*0. 1. 15*0.	   17*0. 1. 12*0.
#					 20*0. 1.  9*0.	   23*0. 1.  6*0.
#					 26*0. 1.  3*0.	   29*0. 1.
# 1 system reliability constraint:
	  secondary_response_mapping   =  30*0. 1.

variables,
	id_variables = 'OPTIM_V'
	continuous_design = 7
	  initial_point 1.0  1.225 1.0 1.25 1.75  1.05 0.8 # mid-point
#	  initial_point 0.5  1.1   0.5 1.0  0.875 0.9  0.4 # lower bound
	  lower_bounds  0.5  1.1   0.5 1.0  0.875 0.9  0.4
	  upper_bounds  1.5  1.35  1.5 1.5  2.625 1.2  1.2
	  descriptors 'x1_mean' 'x2_mean' 'x3_mean' 'x4_mean' 'x5_mean' 'x6_mean' 'x7_mean'

responses,
	id_responses = 'OPTIM_R'
	objective_functions = 1
# enforces component p < 0.1, beta* > 1.28155
#	nonlinear_inequality_constraints  = 10
#	nonlinear_inequality_lower_bounds = 10*1.28155
#	nonlinear_inequality_upper_bounds = 10*1.e+50
# enforces series system p < 0.1, beta* > 1.28155
	nonlinear_inequality_constraints  = 1
	nonlinear_inequality_upper_bounds = 1.e+50	#s0,#s1,#s2,#s3
	nonlinear_inequality_lower_bounds = 1.28155	#s0,#s1
# enforces series parallel beta* > 20.
#	nonlinear_inequality_lower_bounds = 20.		#s2,#s3
	analytic_gradients				
#	numerical_gradients				
#	  interval_type central
#	  fd_gradient_step_size = 1.e-2
	no_hessians

interface,
	id_interface = 'OPTIONAL_I'
	direct
	  analysis_driver = 'side_impact_cost'

responses,
	id_responses = 'OPTIONAL_I_R'
	objective_functions = 1
	analytic_gradients
	no_hessians

method,
	id_method = 'UQ'
	model_pointer = 'UQ_M'
	local_reliability nip
#	  mpp_search x_taylor_mpp
	  mpp_search no_approx
	  response_levels = 1. 32. 32. 32. .32 .32 .32 4.01 9.9 15.69	
#	  compute probabilities
#	  compute reliabilities
	  compute gen_reliabilities
#	  integration second_order		#s1,#s3
# default is individual component reliabilities
	  series system				#s0,#s1
#	  parallel system			#s2,#s3
	  complementary distribution
	  output silent

model,
	id_model = 'UQ_M'
	single
	  variables_pointer = 'UQ_V'
	  interface_pointer = 'UQ_I'
	  responses_pointer = 'UQ_R'

variables,
	id_variables = 'UQ_V'
	normal_uncertain = 11
	  means           = 1.0  1.225 1.0 1.25 1.75  1.05 0.8 # mid-point
                           .345 .192   0.  0.
	  std_deviations  = .03  .03  .03  .03  .03  .03  .03 .006 .006  10. 10.
	  descriptors     = 'x1' 'x2' 'x3' 'x4' 'x5' 'x6' 'x7' 'x8' 'x9' 'x10' 'x11'

interface,
	id_interface = 'UQ_I'
	direct
	  analysis_driver = 'side_impact_perf'
	  deactivate restart_file #evaluation_cache

responses,
	id_responses = 'UQ_R'
	response_functions = 10
	numerical_gradients
	  forward fd_gradient_step_size = 1.e-6
	no_hessians				#s0,#s2
#	numerical_hessians			#s1,#s3
#	  central fd_hessian_step_size = 1.e-5	#s1,#s3
