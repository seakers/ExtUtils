#@ *: DakotaConfig=HAVE_OPTPP
#@ *: ExecCmd='dakota_library_mode' Restart=none
#@
#@ -------------------------
#@ serial tests (rosenbrock)
#@ -------------------------
#@ s*: Label=SmokeTest
#@
#@ test 0: parsed input file (library mode 1)
#@ override dakota command; leave input file as dakota_library_mode.in
#@
#@ test 1: direct data object insertion (library mode 2)
#@ override dakota command; override input file to none
#@ s1: InputFile=''
#@
#@ test 2: mixed mode with an input file (library mode 3)
#@ override dakota command; leave input file as dakota_library_mode.in
#@ s2: ExecArgs='-mixed'
#@
#@ test 3: mixed mode using default input string (library mode 3)
#@ override dakota command; override input file to none
#@ s3: ExecArgs='-mixed' InputFile=''
#@
#@ --------------------------
#@ parallel tests (text_book); first 4 use same principles as serial
#@ --------------------------
#@ p*: Label=AcceptanceTest
#@ p0: MPIProcs=2
#@ p1: MPIProcs=2 InputFile=''
#@ p2: MPIProcs=2 ExecArgs='-mixed'
#@ p3: MPIProcs=2 InputFile='' ExecArgs='-mixed' 
#@ p4: MPIProcs=2
#@ p5: MPIProcs=2
#@ p6: MPIProcs=4
#@ p7: MPIProcs=4

# dakota_library_mode.in: tests for DAKOTA's library mode, with various
# input and parallelism specifications (requires dakota_library_mode binary)

method,
	optpp_q_newton				#s0,#s1,#s2,#s3,#p0,#p1,#p2,#p3
	  max_iterations = 50			#s0,#s1,#s2,#s3,#p0,#p1,#p2,#p3
	  convergence_tolerance = 1e-5		#s0,#s1,#s2,#s3,#p0,#p1,#p2,#p3
#	polynomial_chaos				#p4,#p5,#p6,#p7
#	  expansion_order = 4 collocation_ratio = 2	#p4,#p5,#p6,#p7
#	  use_derivatives     				#p4,#p5,#p6,#p7

variables,
	continuous_design = 2			#s0,#s1,#s2,#s3,#p0,#p1,#p2,#p3
#	uniform_uncertain = 2				#p4,#p5,#p6,#p7
	  lower_bounds   -2.0 -2.0	
	  upper_bounds    2.0  2.0	
	  descriptors     'x1' 'x2'

interface,
	direct
	  analysis_driver = 'plugin_rosenbrock'		#s0,#s1,#s2,#s3
#	  analysis_driver = 'plugin_text_book'	#p0,#p1,#p2,#p3,#p4,#p5,#p6,#p7
#	  asynchronous processors_per_analysis = 2	#p4,#p5,#p6,#p7
# one server/single pass:
#	    evaluation_concurrency = 10			#p4
# one server/multiple passes and two servers/single pass:
#	    evaluation_concurrency = 5			#p5,#p6
# two servers/multiple passes:
#	    evaluation_concurrency = 2	      		#p7

responses,
	objective_functions = 1			#s0,#s1,#s2,#s3,#p0,#p1,#p2,#p3
#	nonlinear_inequality_constraints = 2		#p0,#p1,#p2,#p3
#	response_functions = 3		   		#p4,#p5,#p6,#p7
	analytic_gradients
	no_hessians
