# Last tested 131122 - Dakota 5.4
# usage
# dakota dakota_Ponly_calibration.in &> dakota.out

# this runs a gradient based optimization, which is formulated
# to minimize residual values
# it runs multiple times, to remove dependence on initial point
# Dakota will run the analysis driver, and get a results file
# with 24 responses. It then subtracts the 24 terms in the
# calibration_data_file, and then minimizes the residuals 
# simultaneously.
# after this runs, you can read the results in dakota.out, or
# analyze the tabular data

environment
  tabular_graphics_data
    tabular_graphics_file 'Ponly_Tank1_calibration.dat'
  method_pointer = 'multi_start'

method
  id_method 'multi_start'
  multi_start
    random_starts = 10
  method_pointer 'method_nl2sol'

method
  id_method  = 'method_nl2sol'
  nl2sol
    max_iterations = 100
    convergence_tolerance = 1e-6
    x_conv_tol = 1e-6

model
  single

variables
  active design
  continuous_design = 5
    descriptors =    'E'      'Nu'     'L'  'R' 'T' 
    lower_bounds =   2.5e7    0.25    57    27   0.21
    upper_bounds =   3.5e7    0.32    63    32   0.26
  continuous_state = 4
    initial_state = 4 3   0 1
    descriptors = 'meshID' 'resultStyle'  'Gamma_Chi' 'H'

interface
  analysis_driver = 'RunTank_Ponly_calibration.sh' #specialize driver script because each function evaluation requires multiple runs of EvalTank.py
    fork
      parameters_file 'params.in'
      results_file 'results.out'
      file_tag
  deactivate restart_file
  asynchronous
    evaluation_concurrency 8 # this method can use concurrency up to the number of design variables, while computing numerical gradients

responses
  calibration_terms = 24
    calibration_data_file = 'Ponly_Tank1_DisplacementData_1column.txt' # the original data file was a matrix 6x4. But Dakota requires all the terms in one column. You can optionally specify weights for the residuals - see the reference manual.
      freeform
  numerical_gradients
  no_hessians
